package com.yk;

import java.util.ArrayList;

public class ErArraySample {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		Integer[][] arr = new Integer[][] {
//				{1,   4,  7, 11, 15},
//				{2,   5,  8, 12, 19},
//				{3,   6,  9, 16, 22},
//				{18, 21, 23, 26, 30}
//		};
//		boolean isFind = find(arr, 16);
//		System.out.println((isFind ? "找到了" : "没有找到"));
		
		Integer[] arr = new Integer[] {2, 3, 1, 0, 2, 5};
		
		
		Integer[] result = findDup(arr);
		for (int i = 0; i < result.length; i++) {
			System.out.println(result[i]);
		}
		
		
	}
	/*
	 给定一个二维数组，其每一行从左到右递增排序，从上到下也是递增排序。给定一个数，判断这个数是否在该二维数组中。
	Consider the following matrix:
	[
	  [1,   4,  7, 11, 15],
	  [2,   5,  8, 12, 19],
	  [3,   6,  9, 16, 22],
	  [10, 13, 14, 17, 24],
	  [18, 21, 23, 26, 30]
	]
	
	Given target = 5, return true.
	Given target = 20, return false.
	 * */
	
	public static boolean find(Integer[][] arr,Integer target) {
		if (arr == null || arr.length == 0 || arr[0].length == 0) {
			return false;
		}
		int rows = arr.length;
		int columns = arr[0].length;
		int rightUpRow = 0;
		int rightUpColumn = columns - 1;
		while (rightUpRow < rows && rightUpColumn >=0) {
			if (target == arr[rightUpRow][rightUpColumn]) {
				return true;
			}else if (target > arr[rightUpRow][rightUpColumn]) {
				rightUpRow++;
			}else if (target < arr[rightUpRow][rightUpColumn]) {
				rightUpColumn--;
			}
		}
		return false;
	} 
	
	/*
	 在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。
		Input:
		{2, 3, 1, 0, 2, 5}
		
		Output:
		2 
	 * */
	/*
	 * 结题思路:
	 * */
	public static Integer[] findDup(Integer[] arr) {
		
		ArrayList<Integer> nArray = new ArrayList<Integer>();
		for (int i = 0; i < arr.length; i++) {
			while (arr[i] != i) {
				if (arr[i] == arr[arr[i]]) {
	                return new Integer[] {arr[i]};
				}
				changed(arr, i, arr[i]);
			} 			
		}
		return new Integer[] {};
	} 
	static void changed(Integer[]arr , Integer index1, Integer index2) {
		Integer tempInteger = 0;
 		tempInteger = arr[index1];
 		arr[index1] = arr[index2];
 		arr[index2] = tempInteger;
	}

}
